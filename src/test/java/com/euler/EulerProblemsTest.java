package com.euler;


import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Create by Amit on 10/1/20
 */
public class EulerProblemsTest {
    private EulerProblems eulerProblems = new EulerProblems();

    @Test
    public void verifyProblem1(){
/*
        Multiples of 3 and 5
        If we list all the natural numbers below 10 that are multiples of 3 or 5,
            we get 3, 5, 6 and 9. The sum of these multiples is 23.
        Find the sum of all the multiples of 3 or 5 below 1000.
*/
        int sum = 0;
        for (int i = 1; i <1000 ; i++) {
            if((i % 3 ==0) || (i % 5 == 0)){
                sum += i;
            }
        }
        System.out.printf("Sum of Multiples of 3 and 5  = " + sum);
        Assert.assertEquals(sum,233168);
    }

    @Test
    public void verifyProblem2(){
/*      Even Fibonacci numbers
        Each new term in the Fibonacci sequence is generated by adding the previous two terms.
         By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million,
         find the sum of the even-valued terms.
   */
        List<Integer> fibonacciNumbers = new ArrayList<Integer>();
        fibonacciNumbers.add(1);
        fibonacciNumbers.add(2);
        int currentSum = 0;
        int sumOffibonacciNumbers = 0;

        for (int i = 1; i < 1000; i++) {
            currentSum = fibonacciNumbers.get(i) + fibonacciNumbers.get(i-1);
            if(currentSum < 4000000){
                fibonacciNumbers.add(currentSum);
                continue;
            }else {
                break;
            }
        }
        System.out.println("fibonacciNumbers = " + fibonacciNumbers);
        int sum = 0;
        for (int i = 0; i < fibonacciNumbers.size() ; i++) {
            if(fibonacciNumbers.get(i) % 2 == 0){
                sum += fibonacciNumbers.get(i);
            }
        }
        System.out.println("Final sum is of fibonacci Series = " + sum);
        Assert.assertEquals(sum, 4613732);
    }


    @Test(enabled = false)
    public void verifyProblem3(){
/*
        Largest prime factor
        The prime factors of 13195 are 5, 7, 13 and 29.
        What is the largest prime factor of the number 600851475143 ?
*/
//        1 71 839 1471 6857 59569 104441 486847 1234169 5753023 10086647 87625999 408464633 716151937 8462696833
        long number = 600851475143l;

//        long number = 1000;
        List<Long> allFactors = eulerProblems.getAllFactorsOfNumber(number);
        System.out.println("\n" + allFactors);
        List<Long> primeFactors = getPrimeFactorsOfNumber(allFactors);
        System.out.println("\n" + primeFactors);
    }

    @Test
    public void verifyProblem4(){
/*
        Largest palindrome product
        A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
        Find the largest palindrome made from the product of two 3-digit numbers.
*/
        int small = 10;
        int big = 99;

        Assert.assertEquals(eulerProblems.getLargestPalindromeOfProductOfTwoNumbers(small,big),9009);
        Assert.assertEquals(eulerProblems.getLargestPalindromeOfProductOfTwoNumbers(100,999),906609);

    }

    @Test
    public void verifyProblem5(){
/*
        Smallest multiple
        2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
        int result = 0;
//        int max = 10;
        int max = 20;
        for (int i = max * 2 ; i < 1000000000; i++) {
            boolean flag = true;
            for (int j = 1; j <= max; j++) {
                if(i%j == 0){
                    continue;
                }else {
                    flag = false;
                    break;
                }
            }
            if(flag == true){
                result = i;
                break;
            }

        }
//        System.out.println("Smallest divisible number from 1 to 10 = " + result);
//        Assert.assertEquals(result,2520);
        System.out.println("Smallest divisible number from 1 to 20 = " + result);
        Assert.assertEquals(result,232792560);
    }

    private List<Long> getPrimeFactorsOfNumber(List<Long> numbers) {
        List<Long> primeFactors =  new ArrayList<Long>();
        for (int i = 0; i < numbers.size() ; i++) {
            Boolean yesOrNo = eulerProblems.isThisAPrimeNumber(numbers.get(i));
            if(yesOrNo == true){
                primeFactors.add(numbers.get(i));
                System.out.printf(String.valueOf(numbers.get(i)) + " ");
            }
        }
        return primeFactors;
    }

    private int getSumOfFibonacciNumbersFromArray(List<Integer> fibonacciNumbers) {
        int sum = 0;
        for (int i = 0; i < fibonacciNumbers.size() ; i++) {
            sum += fibonacciNumbers.get(i);
        }
        return sum;
    }

    @Test
    public void verifyIsThisAPrimeNumber(){
        Assert.assertEquals(eulerProblems.isThisAPrimeNumber((long)8),false);
        Assert.assertEquals(eulerProblems.isThisAPrimeNumber((long)79),true);
        Assert.assertEquals(eulerProblems.isThisAPrimeNumber((long)997),true);
        Assert.assertEquals(eulerProblems.isThisAPrimeNumber((long)8),false);
    }

}
